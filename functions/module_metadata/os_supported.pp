# Returns whether or not the passed module is supported per the module's
# metadata.json.
#
# @param module_metadata
#   A Hash of the contents of the metadata.json for a puppet module.
#
#   * In general, this should be generated by load_module_metadata($module_name)
#
# @param options
#   Options that determine the nature of OS matching
#
#   Attributes:
#     release_match:
#        * 'none'  -> No match on release (default)
#        * 'full'  -> Full release must match
#        * 'major' -> Only the major release must match
#
# @return [Boolean]
#   true  => The OS + release is supported
#   false => The OS + release is not not supported
#
function simplib::module_metadata::os_supported (
  Hash $module_metadata,
  Optional[Struct[{
    release_match => Enum['none','full','major']
  }]] $options = undef
) >> Boolean {

  $_default_options = { 'release_match' => 'none' }

  if $options {
    $_options = deep_merge($_default_options, $options)
  }
  else {
    $_options = $_default_options
  }

  if !$module_metadata['operatingsystem_support'] or empty($module_metadata['operatingsystem_support']) {
    debug("'operatingsystem_support' was not found in module '${module_name}'")

    $result = true
  }

  unless ($facts['os']['name'] in $module_metadata['operatingsystem_support'].map |Simplib::Puppet::Metadata::OS_support $os_info| { $os_info['operatingsystem'] }) {
    $result = false
  }

  unless defined('$result') {
    $result = $module_metadata['operatingsystem_support'].reduce(true) |$memo, Simplib::Puppet::Metadata::OS_support $os_info| {
      if $os_info['operatingsystem'] == $facts['os']['name'] {
        $memo and case $_options['release_match'] {
          'full': {
            !$os_info['operatingsystemrelease'] or ($facts['os']['release']['full'] in $os_info['operatingsystemrelease'])
          }
          'major': {
            if $os_info['operatingsystemrelease'] {
              $_os_major_releases = $os_info['operatingsystemrelease'].map |$os_release| {
                split($os_release, '\.')[0]
              }

              $facts['os']['release']['major'] in $_os_major_releases
            }
            else { true }
          }
          default: { true }
        }
      }
      else { true and $memo }
    }
  }

  unless defined('$result') { $result = true }

  $result
}
